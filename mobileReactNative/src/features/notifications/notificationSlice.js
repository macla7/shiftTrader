import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import produce from "immer";
import {
  fetchNotifications,
  createNotification,
  destroyNotification,
  updateNotification,
} from "./notificationAPI";
import { createNotificationBlueprint } from "./notificationBlueprintAPI";

export const Statuses = {
  Initial: "Not Fetched",
  Loading: "Loading..",
  UpToDate: "Up To Date",
  Deleted: "Deleted",
  Error: "Error",
};

const initialState = {
  notifications: [
    {
      id: 0,
      notification_blueprint_id: 0,
      recipient_id: 0,
      notification_blueprint: {
        id: 0,
        notificationable_type: "",
        notificationable_id: 0,
        notification_type: 0,
      },
      notification_origin: {
        id: 0,
        notification_blueprint_id: 0,
        notifier_id: 0,
      },
    },
  ],
  status: Statuses.Initial,
};

export const fetchNotificationsAsync = createAsyncThunk(
  "notifications/fetchNotifications",
  async () => {
    const response = await fetchNotifications();
    return response;
  }
);

export const createNotificationAsync = createAsyncThunk(
  "notifications/createNotification",
  async (payload) => {
    const response = await createNotification(payload);
    return response;
  }
);

export const createNotificationBlueprintAsync = createAsyncThunk(
  "notifications/createNotification",
  async (payload) => {
    const response = await createNotificationBlueprint(payload);
    return response;
  }
);

export const updateNotificationAsync = createAsyncThunk(
  "notifications/updateNotification",
  async (payload) => {
    const response = await updateNotification(payload);
    return response;
  }
);

export const destroyNotificationAsync = createAsyncThunk(
  "notifications/destroyNotification",
  async (payload) => {
    const response = await destroyNotification(payload);
    return response;
  }
);

export const notificationSlice = createSlice({
  name: "notification",
  initialState,
  reducers: {
    addNotification: (state, action) => {
      state.notifications.unshift(action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // while you wait
      .addCase(fetchNotificationsAsync.pending, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Loading;
        });
      })
      // you got the thing
      .addCase(fetchNotificationsAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          draftState.notifications = action.payload;
          draftState.status = Statuses.UpToDate;
        });
      })
      // error
      .addCase(fetchNotificationsAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Error;
        });
      })
      // while you wait
      .addCase(createNotificationBlueprintAsync.pending, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Loading;
        });
      })
      // you got the thing
      .addCase(createNotificationBlueprintAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          draftState.notifications = action.payload;
          draftState.status = Statuses.UpToDate;
        });
      })
      // error
      .addCase(createNotificationBlueprintAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Error;
        });
      })
      .addCase(destroyNotificationAsync.pending, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Loading;
        });
      })
      // you got the thing
      .addCase(destroyNotificationAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          draftState.notifications = action.payload;
          draftState.status = Statuses.UpToDate;
        });
      })
      // error
      .addCase(destroyNotificationAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Error;
        });
      })
      .addCase(updateNotificationAsync.pending, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Loading;
        });
      })
      // you got the thing
      .addCase(updateNotificationAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          // const index = draftState.notifications.findIndex(
          //   (notification) => notification.id === action.payload.id
          // );
          // draftState.notifications[index] = action.payload;
          // draftState.status = Statuses.UpToDate;
          draftState.notifications = action.payload;
          draftState.status = Statuses.UpToDate;
        });
      })
      // error
      .addCase(updateNotificationAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Error;
        });
      });
  },
});

export const { addNotification } = notificationSlice.actions;

export const selectNotifications = (state) => state.notifications.notifications;

export const selectStatus = (state) => state.notifications.status;

export default notificationSlice.reducer;
