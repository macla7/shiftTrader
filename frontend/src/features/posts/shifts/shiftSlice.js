import { createSlice } from "@reduxjs/toolkit";

export const Statuses = {
  Initial: "Not Fetched",
  Loading: "Loading..",
  UpToDate: "Up To Date",
  Deleted: "Deleted",
  Error: "Error",
};

const initialState = {
  shifts: [],
  status: Statuses.Initial,
};

export const initialShiftState = initialState;

export const shiftSlice = createSlice({
  name: "shift",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    createShift: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.shifts.push(action.payload);
      state.status = Statuses.UpToDate;
    },
    deleteShift: (state, action) => {
      state.shifts.filter((shift) => shift.temp_id !== action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const { createShift, deleteShift } = shiftSlice.actions;

export default shiftSlice.reducer;
